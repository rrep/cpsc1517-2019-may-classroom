@{
    //any variable within the opening coding block is global to the page.
    Layout = "~/_Layout.cshtml";
    Page.Title = "Multi-Record Query";

    //retrieve the passed data values. use the .QueryString structure of the Request
    //syntax
    //Request.QueryString["passeddatalabel"]
    //if no label is specified on the url, the result will be null

    var categoryString = Request.QueryString["cid"];

    //Test to see if you actually received a value
    if (string.IsNullOrEmpty(categoryString))
    {
        Response.Redirect("MultiRecordQuery.cshtml");
    }

    //
    var categoryName = "";
    var db = Database.Open("NWDB");
    var queryCommand = @"Select ProductID, ProductName, QuantityPerUnit, UnitPrice, Discontinued
 From Products
 Where CategoryID = @0";

    var queryCommandTwo = @"Select CategoryID, CategoryName
         From Categories
         ORDER BY CategoryName";

    var results = db.Query(queryCommand, categoryString);
    var results2 = db.Query(queryCommandTwo);

    foreach (var obj in results2)
    {
        if (obj.CategoryID.ToString() == categoryString)
        {
            categoryName = obj.CategoryName;
        }
    }

    //webgrid is an object, so you need to create an instance of the object.
    //the "default" constructor for webgrid needs to be given the dataset
    
    //to control page size, specify the page size as you create your instance
    var gridinstance = new WebGrid(results, rowsPerPage:5);
}
@section banner{
    <h1>DataBase - Multi-Record Results</h1>

    <blockquote>
        This is the second page of a two page query technique. The second page will load a grid of data provided by the database. The page will use the selected value from the dropdown list of the previous page to display multiple records for the selected value using a webgrid object.
    </blockquote>
}

<span style="font-size: xx-large; font-weight:bold;">Database Webgrid</span><br />
<div class="row">
    <div class="col-md-offset-1">
        <span style="font-size:x-large">Products for @categoryName</span>
        <!--default webgrid-->
        @*gridinstance.GetHtml()*@
        <!--
    Customized webgrid
        a) use botstrap classes to spread outthe columsn
        b) customized the Pager (rowsPerPage on the new WebGrid command above)
        c) select specific columns for use. columns: instancename.Columns()
            within the .Columns method, you specify each column you want off your record set
            to do this you will use gridInstance.Column(columnName: "xxx", header: "xxx")
            d) add an additional field to the grid that does not exist from the query-->
        @gridinstance.GetHtml(
       tableStyle: "table table-bordered table-striped hover",
       mode: WebGridPagerModes.All,
       firstText: "Start",
       lastText: "End",
       columns: gridinstance.Columns(
           gridinstance.Column(columnName: "ProductID", header: "ID", canSort:true),
           gridinstance.Column(columnName: "ProductName", header: "Product", canSort: true),
           gridinstance.Column(columnName: "UnitPrice", header: "$", canSort: false, format: (item) => item.UnitPrice.ToString("0.00")),
           gridinstance.Column(columnName: "Discontinued", header: "DISC", canSort: false, format: @<input name="Discontinued" type="checkbox" value="@item.Discontinued" disabled="disabled"
                                                                                                        @(item.Discontinued == true ? "checked" : null) />),
           gridinstance.Column(header:"",
           format: @<text><a href="~/DB_Pages/WebGridDestination.cshtml?pid=@item.ProductName" onclick="return confirm('Are you sure you wish to view the product details of @item.ProductName')">View</a></text>)
                     ))<!--the above line is a tanary operator that will change the value to "checked" if the property is true-->
        <br />
        <a href="MultiRecordQuery.cshtml">Back To Original Page</a>
    </div>

</div>