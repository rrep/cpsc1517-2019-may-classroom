@{
    Layout = "~/_Layout.cshtml";
    Page.Title = "CRUD Page";

    var thebutton = Request.Form["formbutton"];
    var productId = "";
    var ProductName = "";
    var SupplierID = "";
    var CategoryID = "";
    var QuantityPerUnit = "";
    var UnitPrice = "";
    var UnitsInStock = "";
    var UnitsOnOrder = "";
    var ReorderLevel = "";
}
@section banner{
    <h1>DataBase: CRUD</h1>
}

@if (IsPost)
{
    //if you have multiple buttons, a good practise is to determine what action to do for the pressed button FIRST
    if (thebutton.Equals("Clear"))
    {
        <p class="text-center well">Form has been cleared!</p>
    }
    else
    {
        productId = "";
        ProductName = Request.Form["ProductName"];
        SupplierID = Request.Form["SupplierID"];
        CategoryID = Request.Form["CategoryID"];
        QuantityPerUnit = Request.Form["QuantityPerUnit"];
        UnitPrice = Request.Form["UnitPrice"];
        UnitsInStock = Request.Form["UnitsInStock"];
        UnitsOnOrder = Request.Form["UnitsOnOrder"];
        ReorderLevel = Request.Form["ReorderLevel"];

        //assume for now that all data is valid.

        //you should and are expected to perform crud operations within user friendly error handling - using a try catch
        try
        {
            var db = Database.Open("NWDB");
            var insertCommand = @"Insert
                       Into PRODUCTS
                        (ProductName, SupplierID, CategoryID, QuantityPerUnit, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel, Discontinued)
                       Values
                        (@0, @1, @2, @3, @4, @5, @6, @7, 'False')";

            var newID = db.Execute(insertCommand,
                ProductName,
                string.IsNullOrEmpty(SupplierID) ? null : SupplierID,
                string.IsNullOrEmpty(CategoryID) ? null : CategoryID,
                string.IsNullOrEmpty(QuantityPerUnit) ? null : QuantityPerUnit,
                string.IsNullOrEmpty(UnitPrice) ? null : UnitPrice,
                string.IsNullOrEmpty(UnitsInStock) ? null : UnitsInStock,
                string.IsNullOrEmpty(UnitsOnOrder) ? null : UnitsInStock,
                string.IsNullOrEmpty(ReorderLevel) ? null : ReorderLevel);

            <p class="text-center well" style="color: lightseagreen; font-weight:bolder;">Product Has Been Added</p>
            //what is returned to the "newID" thing is the rows affected, not the new id.
            var queryCommand = "Select ProductID from PRODUCTS where ProductName = @0";
            var result = db.QueryValue(queryCommand, ProductName);
            productId = result.ToString();
        }
        catch (Exception ex)
        {
            <p class="text-center well" style="color: firebrick; font-weight:bolder;">@ex.Message</p>
        }
    }
}

<form id="theform" method="post">
    <div class="row">
        <div class="col-md-6 text-right">
            <label for="ProductID">Product ID:</label><br />
            <label for="ProductName">ProductName</label><br />
            <label for="SupplierID">Supplier ID:</label><br />
            <label for="CategoryID">Category ID:</label><br />
            <label for="QuantityPerUnit">QTY:</label><br />
            <label for="UnitPrice">Unit Price:</label><br />
            <label for="UnitsInStock">QoH:</label><br />
            <label for="UnitsOnOrder">Qoo:</label><br />
            <label for="ReorderLevel">RoL:</label><br />
        </div>
        <div class="col-md-6 text-left">
            <input type="text" readonly="readonly" id="ProductID" name="ProductID" value="@productId" /><br />
            <input type="text" id="ProductName" name="ProductName" value="@ProductName" /><br />
            <input type="text" id="SupplierID" name="SupplierID" value="@SupplierID" /><br />
            <input type="text" id="CategoryID" name="CategoryID" value="@CategoryID" /><br />
            <input type="text" id="QuantityPerUnit" name="QuantityPerUnit" value="@QuantityPerUnit" /><br />
            <input type="text" id="UnitPrice" name="UnitPrice" value="@UnitPrice" /><br />
            <input type="text" id="UnitsInStock" name="UnitsInStock" value="@UnitsInStock" /><br />
            <input type="text" id="UnitsOnOrder" name="UnitsOnOrder" value="@UnitsOnOrder" /><br />
            <input type="text" id="ReorderLevel" name="ReorderLevel" value="@ReorderLevel" /><br />
            <br /><br />
        </div>
    </div>
    <div class="row">
        <div class="text-center">
            <input type="submit" id="formbutton" name="formbutton" class="btn btn-primary" value="Add" />
            <input type="submit" id="formbutton" name="formbutton" class="btn" value="Clear" />
        </div>
    </div>
</form>